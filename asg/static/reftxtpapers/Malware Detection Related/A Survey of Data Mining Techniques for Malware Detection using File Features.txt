A Survey of Data Mining Techniques for Malware Detection using File Features
Muazzam Siddiqui,Morgan C. Wang,Joohan Lee
siddiqui@mail.ucf.edu,cwang@mail.ucf.edu,jlee@cs.ucf.edu

A Survey of Data Mining Techniques for Malware Detection using File Features
Muazzam Siddiqui Institute of Simulation &
Training University of Central Florida siddiqui@mail.ucf.edu
Morgan C. Wang Department of Statistics and Actuarial Sciences University of Central Florida cwang@mail.ucf.edu
Joohan Lee School of Electrical
Engineering & Computer Science
University of Central Florida jlee@cs.ucf.edu

Categories and Subject Descriptors
K.6.5 [MANAGEMENT OF COMPUTING AND INFORMATION SYSTEMS]: Security and Protection— Invasive software; H.2.8 [DATABASE MANAGEMENT]: Database Applications—Data mining ; I.2.6 [ARTIFICIAL INTELLIGENCE]: Learning—Concept learning, Connectionism and neural nets

Keywords
Survey, Malware Detection, Data Mining, Machine Learning, N-grams, Instruction Sequences, System Calls

1. INTRODUCTION
This paper presents a survey of data mining techniques for malware detection using file features. The techniques are categorized based upon a three tier hierarchy that includes file features, analysis type and detection type. File features are the features extracted from binary programs, analysis type is either static or dynamic, and the detection type is borrowed from intrusion detection as either misuse or anomaly detection. It provides the reader with the major advancement in the malware research using data mining on file features and categorizes the surveyed work based upon the above stated hierarchy. This served as the major contribution of this paper.

2. SUMMARY
The first major work that used data mining techniques for malware research was an automation of signature extraction for viruses by [6]. Signatures were extracted based upon the probability of finding an n-gram in virus or clean files. This was followed by the pioneering work of [4] where they extended the n-grams analysis to detect boot sector viruses using neural networks. In the continuation of their work in [4], [3] used n-grams as features to build multiple neural network classifiers and adopted a voting strategy to predict the
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Copyright 2008 ACM 0-12345-67-8/90/12 ...$5.00.
final outcome. The most recent work that brought the data mining techniques for malware detection in the limelight was done by [12]. They used DLL information, strings and n-grams to train RIPPER, Naive-Bayes and Multi NaiveBayes classifiers and displayed high accuracy. Extending the same ideas [11], created MEF, Malicious Email Filter, that integrated the scheme described in [12] into a Unix email server. A similar approach was used by [7], where they trained Instance-Based Learner, TFIDF, Naive-Bayes, support vector machines, decision tree, boosted Naive-Bayes, boosted SVMs and boosted decision tree on n-grams. [2] created class profiles of various lengths, defined by the number of most frequent n-grams within the class, using different n-gram sizes. For classification, Dampster-Shafer theory of Evidence was used to combine SVM, decision tree and IBK classifiers. In a related work, [1] used a Common N-Gram classification method to create malware profile signatures. [5] used intra-family and inter-family support for n-grams for feature selection. [18] presented a method to detect viruses using self organizing maps (SOM), claiming that each virus has its own DNA like character that changes the SOM projection of the program that it infects.
[14] created a signature based detection system called Static Analyzer of Vicious Executables (SAVE) that compares API sequences extracted from programs to sequences from a signature database. [8] added a temporal element to the system call frequency and calculated the frequency of system call sequences within a specific time window. These windows were generated for independent peers and a correlation among them indicated a fast spreading worm. [17] developed Intelligent Malware Detection System (IMDS) that used Objective-Oriented Association (OOA) mining based classification. For rule generation, an extension of the FPGrowth algorithm was developed and names OOA Fast FPGrowth algorithm. They claimed better performance than the Apriori algorithm for association rule generation.
[9] created a malware phylogeny using permutation of code. They mutated n-grams to generate n-perms. Similarity scores were calculated using a combination of TFxIDF weighting and cosine similarity measures. Clustering on these similarity scores provided the phylogeny model. [13] used frequency of occurrence of instruction sequences for feature selection and built logistic regression, neural network and decision tree models.
[16] developed PEAT (The Portable Executable Analysis Tool) to detect structural anomalies inside a program. The anomalies were detected using statistical analysis of in-
struction frequencies, instruction patterns, register offsets, jump and call offsets, entropy of opcode values and code and ASCII probabilities.
[10] created a hybrid feature set using n-grams, instruction sequences and API calls and information gain for feature selection. [15] presented a surveillance spyware detection system that used APIs and DLL usage information and changes in registry, system files/folders and network states to detect spywares.
Table 1 summarizes and assigns each work to the hierarchical categories used in this survey.

3. REFERENCES
[1] T. Abou-Assaleh, N. Cercone, V. Keselj, andR. Sweidan. Detection of new malicious code using n-grams signatures. In Proceedings of Second Annual Conference on Privacy, Security and Trust, pages 193–196, 2004.
[2] T. Abou-Assaleh, N. Cercone, V. Keselj, and R. Sweidan. N-gram-based detection of new malicious code. In Proceedings of the 28th Annual International Computer Software and Applications Conference - Workshops and Fast Abstracts - (COMPSAC’04) - Volume 02, pages 41–42, 2004.
[3] W. Arnold and G. Tesauro. Automatically generated win32 heuristic virus detection. In Virus Bulletin Conference, pages 123–132, 2000.
[4] J. O. K. Gerald J. Tesauro and G. B. Sorkin. Neural network for computer virus recognition. IEEE Expert, 11(4):5–6, 1996.
[5] O. Henchiri and N. Japkowicz. A feature selection and evaluation scheme for computer virus detection. icdm, 0:891–895, 2006.
[6] J. O. Kephart and B. Arnold. Automatic extraction of computer virus signatures. In Proceedings of the 4th Virus Bulletin Internation Conference, pages 178–184, 1994.
[7] J. Z. Kolter and M. A. Maloof. Learning to detect malicious executables in the wild. In Proceedings of the 2004 ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2004.
[8] D. J. Malan and M. D. Smith. Host-based detection of worms through peer-to-peer cooperation. In WORM ’05: Proceedings of the 2005 ACM workshop on Rapid malcode, pages 72–80. ACM, 2005.
[9] A. L. Md. Enamul Karim, Andrew Walenstein and L. Parida. Malware phylogeny generation using permutations of code. Journal in Computer Virology, 1(1,2):13–23, 2005.
[10] L. K. Mohammad M. Masud and B. Thuraisingham. A scalable multi-level feature extraction technique to detect malicious executables. Information Systems Frontiers, 2007.
[11] M. G. Schultz, E. Eskin, E. Zadok, M. Bhattacharyya, and S. J. Stolfo. MEF: Malicious email filter: A UNIX mail filter that detects malicious windows executables. pages 245–252, 2001.
[12] M. G. Schultz, E. Eskin, E. Zadok, and S. J. Stolfo. Data mining methods for detection of new malicious executables. In Proceedings of the IEEE Symposium on Security and Privacy, pages 38–49, 2001.
[13] M. Siddiqui, M. C. Wang, and J. Lee. Data mining methods for malware detection using instruction sequences. Accepted at IASTED AIA 2008, 2008.
[14] A. H. Sung, J. Xu, P. Chavez, and S. Mukkamala. Static analyzer of vicious executables. In 20th Annual Computer Security Applications Conference, pages 326–334, 2004.
[15] M.-Y. S. C.-H. W. P.-C. W. Tzu-Yen Wang, Shi-Jinn Horng and W.-Z. Su. A surveillance spyware detection system based on data mining methods. In Evolutionary Computation, 2006. CEC 2006. IEEE Congress on, pages 3236– 3241. IEEE, 2006.
[16] M. Weber, M. Schmid, M. Schatz, and D. Geyer. A toolkit for detecting and analyzing malicious software. In Proceedings of the 18th Annual Computer Security Applications Conference, page 423, 2002.
[17] Y. Ye, D. Wang, T. Li, and D. Ye. Imds: intelligent malware detection system. In KDD ’07: Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 1043–1047. ACM, 2007.
[18] I. Yoo. Visualizing windows executable viruses using self-organizing maps. In Proceedings of the 2004 ACM workshop on Visualization and data mining for computer security, pages 82–89, 2004.
[19] I. Yoo and U. Ultes-Nitsche. Non-signature based virus detection: Towards establishing unknown virus detection technique using som. Journal in Computer Virology, 2(3):163–186, 2006.
